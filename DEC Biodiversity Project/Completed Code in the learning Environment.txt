import codecademylib
from matplotlib import pyplot as plt
import pandas as pd
species = pd.read_csv('species_info.csv')
print(species.head())
species_count = species.scientific_name.nunique() 
species_type = species.category.unique()
conservation_statuses = species.conservation_status.unique()
conservation_counts = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print conservation_counts
species.fillna('No Intervention', inplace = True)
conservation_counts_fixed = species.groupby('conservation_status').scientific_name.nunique().reset_index()
print conservation_counts_fixed
_______________________________________________________________________________________________________
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')

species.fillna('No Intervention', inplace = True)
protection_counts = species.groupby('conservation_status')\
    .scientific_name.nunique().reset_index()\
    .sort_values(by='scientific_name')
print protection_counts
plt.figure(figsize=(10,4))
ax = plt.subplot()
plt.bar(range(len(protection_counts)),protection_counts.scientific_name)
ax.set_xticks(range(5))
ax.set_xticklabels(protection_counts.conservation_status)
plt.ylabel("Number of Species")
plt.title("Conservation Status by Species")
plt.show()
___________________________________________________________________________________________
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')

species.fillna('No Intervention', inplace = True)

species['is_protected'] = species.conservation_status != 'No Intervention'

category_counts = species.groupby(['category', 'is_protected']).scientific_name.nunique().reset_index()

category_pivot = category_counts.pivot(columns='is_protected',
                      index='category',
                      values='scientific_name')\
                      .reset_index()
  
category_pivot.columns = ['category', 'not_protected', 'protected']

category_pivot['percent_protected'] = category_pivot.protected / (category_pivot.protected + category_pivot.not_protected)

print category_pivot
________________________________________________________________________
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt
species = pd.read_csv('species_info.csv')

species.fillna('No Intervention', inplace = True)

species['is_protected'] = species.conservation_status != 'No Intervention'

category_counts = species.groupby(['category', 'is_protected']).scientific_name.nunique().reset_index()

category_pivot = category_counts.pivot(columns='is_protected',
                      index='category',
                      values='scientific_name')\
                      .reset_index()
  
category_pivot.columns = ['category', 'not_protected', 'protected']

category_pivot['percent_protected'] = category_pivot.protected / (category_pivot.protected + category_pivot.not_protected)

print category_pivot

contingency = [[30,146],
               [75,413]]
from scipy.stats import chi2_contingency
contingency = [[30,146],
               [75,413]]
chi2, pval, dof, expected = chi2_contingency(contingency)

contingency = [[5,73],
               [30,146]]
chi2, pval_reptile_mammal, dof, expected = chi2_contingency(contingency)
___________________________________________________________________________________
import codecademylib
import pandas as pd
from matplotlib import pyplot as plt

species = pd.read_csv('species_info.csv')
species.fillna('No Intervention', inplace = True)
species['is_protected'] = species.conservation_status != 'No Intervention'

observations = pd.read_csv('observations.csv')
species['is_sheep']= species.common_names.apply(lambda x: 'Sheep' in x) 
species_is_sheep = species[species.is_sheep]
print(species_is_sheep)
sheep_species = species[species.is_sheep & (species.category == 'Mammal')]
print(sheep_species)
sheep_observations= pd.merge(sheep_species,observations)
print(sheep_observations.head())
obs_by_park = sheep_observations.groupby(['park_name']).observations.sum().reset_index()
print(obs_by_park)
_______________________________________________________________________________________
plt.figure(figsize=(16,4))
ax = plt.subplot()
plt.bar(range(len(obs_by_park)),obs_by_park.observations)
ax.set_xticks(range(4))
ax.set_xticklabels(obs_by_park.park_name)
plt.ylabel("Number of Observations")
plt.title("Observations of Sheep per Week")
plt.show()
_______________________________________________________
baseline = 15
minimum_detectable_effect = 33
sample_size_per_variant= 520
yellowstone_weeks_observing = 1
bryce_weeks_observing= 2